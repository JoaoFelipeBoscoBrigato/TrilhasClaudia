Exercício 1: Buscar Usuário pelo ID
UserSearch.tsx

import React, { useState } from 'react';

interface User {
  id: number;
  name: string;
  email: string;
}

const UserSearch = () => {
  const [userId, setUserId] = useState('');
  const [user, setUser] = useState<User | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const handleSearch = async () => {
    if (!userId.trim()) {
      setError('Por favor, insira um ID');
      return;
    }

    setLoading(true);
    setError(null);
    setUser(null);

    try {
      const response = await fetch(
        `https://jsonplaceholder.typicode.com/users/${userId}`
      );

      if (!response.ok) {
        throw new Error('Usuário não encontrado');
      }

      const data: User = await response.json();
      setUser(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Ocorreu um erro');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '20px', maxWidth: '500px', margin: '0 auto' }}>
      <h2>Buscar Usuário</h2>
      <div style={{ marginBottom: '15px' }}>
        <input
          type="text"
          value={userId}
          onChange={(e) => setUserId(e.target.value)}
          placeholder="Digite o ID do usuário"
          style={{
            padding: '8px',
            width: '200px',
            marginRight: '10px',
          }}
        />
        <button
          onClick={handleSearch}
          disabled={loading}
          style={{
            padding: '8px 16px',
            backgroundColor: '#4CAF50',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
          }}
        >
          {loading ? 'Buscando...' : 'Buscar'}
        </button>
      </div>

      {error && (
        <div style={{ color: 'red', margin: '10px 0' }}>{error}</div>
      )}

      {user && (
        <div style={{ marginTop: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '4px' }}>
          <h3>Informações do Usuário</h3>
          <p><strong>Nome:</strong> {user.name}</p>
          <p><strong>Email:</strong> {user.email}</p>
        </div>
      )}
    </div>
  );
};

export default UserSearch;

Exercício 2: Criar um Novo Usuário
UserForm.tsx

import React, { useState } from 'react';

interface UserData {
  name: string;
  email: string;
}

const UserForm = () => {
  const [userData, setUserData] = useState<UserData>({
    name: '',
    email: '',
  });
  const [message, setMessage] = useState<{ text: string; type: 'success' | 'error' } | null>(null);
  const [loading, setLoading] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setUserData(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage(null);

    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: userData.name,
          email: userData.email,
          // A API não salva realmente os dados, então adicionamos um ID fictício
          id: Math.floor(Math.random() * 1000) + 10, // ID acima de 10 para não conflitar com os existentes
        }),
      });

      if (!response.ok) {
        throw new Error('Falha ao cadastrar usuário');
      }

      const data = await response.json();
      setMessage({ text: `Usuário "${data.name}" cadastrado com sucesso! (ID: ${data.id})`, type: 'success' });
      setUserData({ name: '', email: '' });
    } catch (err) {
      setMessage({
        text: err instanceof Error ? err.message : 'Ocorreu um erro ao cadastrar',
        type: 'error',
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '20px', maxWidth: '500px', margin: '0 auto' }}>
      <h2>Cadastrar Novo Usuário</h2>
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: '15px' }}>
          <label style={{ display: 'block', marginBottom: '5px' }}>Nome:</label>
          <input
            type="text"
            name="name"
            value={userData.name}
            onChange={handleChange}
            required
            style={{
              padding: '8px',
              width: '100%',
              boxSizing: 'border-box',
            }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label style={{ display: 'block', marginBottom: '5px' }}>Email:</label>
          <input
            type="email"
            name="email"
            value={userData.email}
            onChange={handleChange}
            required
            style={{
              padding: '8px',
              width: '100%',
              boxSizing: 'border-box',
            }}
          />
        </div>
        <button
          type="submit"
          disabled={loading}
          style={{
            padding: '8px 16px',
            backgroundColor: '#2196F3',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
          }}
        >
          {loading ? 'Enviando...' : 'Cadastrar'}
        </button>
      </form>

      {message && (
        <div
          style={{
            marginTop: '15px',
            padding: '10px',
            color: message.type === 'success' ? 'green' : 'red',
            border: `1px solid ${message.type === 'success' ? 'green' : 'red'}`,
            borderRadius: '4px',
          }}
        >
          {message.text}
        </div>
      )}
    </div>
  );
};

export default UserForm;

Como usar os componentes
Você pode usar esses componentes em seu App.tsx da seguinte forma:

import React from 'react';
import UserSearch from './UserSearch';
import UserForm from './UserForm';

function App() {
  return (
    <div style={{ fontFamily: 'Arial, sans-serif', maxWidth: '1200px', margin: '0 auto', padding: '20px' }}>
      <h1 style={{ textAlign: 'center', color: '#333' }}>Exercícios de Consumo de API</h1>
      
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '30px', marginTop: '30px' }}>
        <div style={{ border: '1px solid #ddd', borderRadius: '8px', padding: '20px' }}>
          <UserSearch />
        </div>
        
        <div style={{ border: '1px solid #ddd', borderRadius: '8px', padding: '20px' }}>
          <UserForm />
        </div>
      </div>
    </div>
  );
}

export default App;
